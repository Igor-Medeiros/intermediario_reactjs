                                INTRODUÇÃO AO REDUX

                Parte 1 - Arquitetura Flux

        Flux é o padrão de projeto para tráfego de dados de maneira unidirecional.

            ACTION -> DISPATCHER -> STORE -> VIEW

    1 - ACTION = é como um telégrafo: ele formata a mensagem a ser enviada.

    2 - DISPATCHER = é como um telefonista; ele sabe todos os callbacks para diferentes Stores.

    3 - STORE = é como um gerente super controlador; Ele guarda a informação e todas as alterações têm que ser feitas por ele mesmo, mais ninguém.

    4 - VIEW = é como um gerente intermediário (middleware) que recebe as notificações da store e passa os dados para as visões abaixo dela.

    A arquitetura de Flux, tem diversas implementações:
        Redux (mais popular)
        Reflux
        Mobx
        Vuex (baseado em Redux e Elm)
        NgRx/store (baseada em Redux e RxJS)

    Bibliotecas baseadas em Flux
        Servem para comunicação entre componentes
        Centralizam a informação
        "Flux libraries are like glasses: you'll know when you need them." - Dan Abramov
        "As bibliotecas Flux são como oculos: você ira saber quando usar elas.

                Parte 2 - Redux
    
    Criado por Dan Abramov e Andrew Clark em 2015
    Redux é uma implementação de Flux
        Possui algumas diferenças

    Como funciona o Redux: React(view) -> action -> store pode voltar ao React ou ir para o reducer

    3 Principios basicos do Redux:
        1 - Single source of truth: Uma única store
        2 - State é read-only
        3 - Mudanças são feitas com pure functions

    Actions no Redux: 
        Actions são como o Flux
        Diferença: Actions não enviam a action em si para o dispatcher 
        Retornam um objeto de action formatado

    Store no Redux:
        Em Flux: diversas Stores
        Em Redux: uma única Store
        A Store aqui cuida de toda a árvore de estados
        Os reducers que cuidam de descobrir qual estado muda
    
    Reducers no Redux:
        Em Redux não há dispatcher (simplifica e divide o trabalho da Store)
        A Store se conecta ao root reducer, que divide os estados em pequenos reducers para descobrir como lidar com esse estado.
        Os estados aqui são imutáveis.

    View no Redux:
        Em React, adiciona na camada de View 3 novos conceitos para conectar a View à Store.
            1 - Provider
            2 - connect()
            3 - selector
        
                Parte 3 - Redux + React

    Instalação do Redux
        npm install react-redux
        npm install --save-dev redux-devtools

    
